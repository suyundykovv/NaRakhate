package servers

import (
	"Aitu-Bet/internal/models"
	"database/sql"
	"log"
	"math/rand"
	"time"
)

// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö
var slotSymbols = []string{"üçí", "üçã", "üçâ", "‚≠ê", "7Ô∏è‚É£"}

// SpinSlots - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ä–∞—â–µ–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–∏–≥—Ä—ã—à
func (s *Server) SpinSlots(userID int, betAmount float64) (*models.SlotSpin, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var userBalance float64
	err := s.db.QueryRow("SELECT wincash FROM users WHERE id = $1", userID).Scan(&userBalance)
	if err == sql.ErrNoRows {
		return nil, err
	}
	if userBalance < betAmount {
		return nil, sql.ErrNoRows // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
	}

	// –ö—Ä—É—Ç–∏–º —Ç—Ä–∏ –±–∞—Ä–∞–±–∞–Ω–∞
	rand.Seed(time.Now().UnixNano())
	reel1 := slotSymbols[rand.Intn(len(slotSymbols))]
	reel2 := slotSymbols[rand.Intn(len(slotSymbols))]
	reel3 := slotSymbols[rand.Intn(len(slotSymbols))]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
	payoutMultiplier := calculatePayout(reel1, reel2, reel3)
	payout := betAmount * payoutMultiplier
	newBalance := userBalance - betAmount + payout

	log.Printf("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å %.2f, —Å—Ç–∞–≤–∫–∞ %.2f, –≤—ã–ø–ª–∞—Ç–∞ %.2f, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å %.2f",
		userID, userBalance, betAmount, payout, newBalance)

	// –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err = s.db.Exec("UPDATE users SET wincash = $1 WHERE id = $2", newBalance, userID)
	if err != nil {
		return nil, err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ä–∞—â–µ–Ω–∏—è –≤ –ë–î
	_, err = s.db.Exec("INSERT INTO slot_spins (user_id, bet_amount, reel1, reel2, reel3, payout) VALUES ($1, $2, $3, $4, $5, $6)",
		userID, betAmount, reel1, reel2, reel3, payout)
	if err != nil {
		return nil, err
	}

	log.Printf("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏–Ω–∞: user_id=%d, —Å—Ç–∞–≤–∫–∞=%.2f, –±–∞—Ä–∞–±–∞–Ω—ã=[%s, %s, %s], –≤—ã–ø–ª–∞—Ç–∞=%.2f",
		userID, betAmount, reel1, reel2, reel3, payout)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä–æ–∫—É
	spin := &models.SlotSpin{
		UserID:    userID,
		BetAmount: betAmount,
		Reel1:     reel1,
		Reel2:     reel2,
		Reel3:     reel3,
		Payout:    payout,
	}
	return spin, nil
}

// calculatePayout - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞
func calculatePayout(r1, r2, r3 string) float64 {
	if r1 == r2 && r2 == r3 {
		switch r1 {
		case "7Ô∏è‚É£":
			return 10.0 // –î–∂–µ–∫–ø–æ—Ç
		case "‚≠ê":
			return 5.0 // –ë–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à
		case "üçâ":
			return 3.0
		case "üçã":
			return 2.0
		case "üçí":
			return 1.5
		}
	}
	return 0.0 // –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª
}
