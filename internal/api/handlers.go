package api

import (
	"Aitu-Bet/internal/services"
	"github.com/gin-gonic/gin"
	"log"
	"net/http"
	"strconv"
)

// LeaderboardHandler ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–º
type LeaderboardHandler struct {
	Service *services.LeaderboardService
}

// GetTopPlayers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≤—ã–∏–≥—Ä—ã—à—É
func (h *LeaderboardHandler) GetTopPlayers(c *gin.Context) {
	limitStr := c.DefaultQuery("limit", "10") // –ü–æ–ª—É—á–∞–µ–º limit –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10
	limit, err := strconv.Atoi(limitStr)
	if err != nil || limit <= 0 {
		limit = 10
	}

	log.Printf("üîç Received request to fetch top %d players", limit) // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤

	// –í—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
	players, err := h.Service.GetTopPlayers(limit)
	if err != nil {
		log.Printf("‚ùå Error in Service.GetTopPlayers: %v", err) // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–µ—Ä–≤–∏—Å–∞
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to fetch leaderboard"})
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	log.Printf("‚úÖ Successfully fetched %d players", len(players))
	c.JSON(http.StatusOK, players)
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
func RegisterRoutes(router *gin.Engine, leaderboardService *services.LeaderboardService) {
	leaderboardHandler := &LeaderboardHandler{Service: leaderboardService}

	// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (–ø—Ä–∏–º–µ—Ä)
	router.GET("/protected", ProtectedEndpoint)

	// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
	router.GET("/leaderboard", leaderboardHandler.GetTopPlayers)
}

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å userID
func ProtectedEndpoint(c *gin.Context) {
	userID, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "User ID not found"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Welcome authorized user", "user_id": userID})
}
